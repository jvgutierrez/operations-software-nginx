From a6b2c78935c88614a2c74870bde8d5b5ed0baa5b Mon Sep 17 00:00:00 2001
From: Brandon L Black <blblack@gmail.com>
Date: Thu, 18 Jun 2015 14:10:42 +0000
Subject: [PATCH 4/7] Stapling SSL: add Multiple SSL certificate support.
 OpenSSL >= 1.0.2 required. Only OCSP responder URL from first certificate
 will be contacted.

These patches are based on the ones from Filipe da Silva here:
http://mailman.nginx.org/pipermail/nginx-devel/2015-March/006734.html
02-AddStaplingCertIssuerList.diff
 # HG changeset patch
 # Parent  816e9d420de0e74e86f6cd4cecd578d57fac60e3
---
 src/event/ngx_event_openssl_stapling.c | 108 +++++++++++++++++++++++++++------
 1 file changed, 89 insertions(+), 19 deletions(-)

diff --git a/src/event/ngx_event_openssl_stapling.c b/src/event/ngx_event_openssl_stapling.c
index 5971668..72392a8 100644
--- a/src/event/ngx_event_openssl_stapling.c
+++ b/src/event/ngx_event_openssl_stapling.c
@@ -28,8 +28,8 @@ typedef struct {
 
     SSL_CTX                     *ssl_ctx;
 
-    X509                        *cert;
-    X509                        *issuer;
+    ngx_array_t                 *certs;
+    ngx_array_t                 *issuers;
 
     time_t                       valid;
     time_t                       refresh;
@@ -42,8 +42,8 @@ typedef struct {
 typedef struct ngx_ssl_ocsp_ctx_s  ngx_ssl_ocsp_ctx_t;
 
 struct ngx_ssl_ocsp_ctx_s {
-    X509                        *cert;
-    X509                        *issuer;
+    ngx_array_t                 *certs;
+    ngx_array_t                 *issuers;
 
     ngx_uint_t                   naddrs;
 
@@ -86,6 +86,8 @@ struct ngx_ssl_ocsp_ctx_s {
 static ngx_int_t ngx_ssl_stapling_file(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *file);
 static ngx_int_t ngx_ssl_stapling_issuer(ngx_conf_t *cf, ngx_ssl_t *ssl);
+static ngx_int_t ngx_ssl_stapling_issuer_init(ngx_conf_t *cf, ngx_ssl_t *ssl,
+    ngx_int_t nbcerts);
 static ngx_int_t ngx_ssl_stapling_issuer_lookup(ngx_conf_t *cf, 
     ngx_ssl_t *ssl, ngx_ssl_certificate_t *certificate);
 static ngx_int_t ngx_ssl_stapling_certid_push(ngx_ssl_stapling_t *staple, 
@@ -263,6 +265,28 @@ failed:
 
 
 static ngx_int_t
+ngx_ssl_stapling_issuer_init(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_int_t nbcerts)
+{
+    ngx_ssl_stapling_t  *staple;
+
+    staple = SSL_CTX_get_ex_data(ssl->ctx, ngx_ssl_stapling_index);
+
+    staple->certs = ngx_array_create(cf->pool, nbcerts,
+                                    sizeof(ngx_ssl_certificate_t));
+
+    staple->issuers = ngx_array_create(cf->pool, nbcerts,
+                                    sizeof(ngx_ssl_certificate_t));
+
+    if (staple->certs == NULL || staple->issuers == NULL) {
+        staple->certs = staple->issuers = NULL;
+        return NGX_ERROR;
+    }
+
+    return NGX_OK;
+}
+
+
+static ngx_int_t
 ngx_ssl_stapling_issuer(ngx_conf_t *cf, ngx_ssl_t *ssl)
 {
     ngx_array_t            *certificates;
@@ -273,6 +297,7 @@ ngx_ssl_stapling_issuer(ngx_conf_t *cf, ngx_ssl_t *ssl)
         return NGX_ERROR;
     }
 
+    ngx_ssl_stapling_issuer_init(cf, ssl, certificates->nelts);
     /* TOFIX: not only use just first one */
     certificate = certificates->elts;
 
@@ -374,8 +399,19 @@ ngx_ssl_stapling_issuer_lookup(ngx_conf_t *cf, ngx_ssl_t *ssl,
 static ngx_int_t ngx_ssl_stapling_certid_push(ngx_ssl_stapling_t *staple, 
     X509 *cert, X509 *issuer)
 {
-    staple->cert = cert;
-    staple->issuer = issuer;
+    ngx_ssl_certificate_t  *item;
+
+    item = ngx_array_push(staple->certs);
+    if (item == NULL) {
+        return NGX_ERROR;
+    }
+    item->x509 = cert;
+
+    item = ngx_array_push(staple->issuers);
+    if (item == NULL) {
+        return NGX_ERROR;
+    }
+    item->x509 = issuer;
 
     return NGX_OK;
 }
@@ -387,15 +423,17 @@ ngx_ssl_stapling_responder(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *responder)
     ngx_url_t                  u;
     char                      *s;
     ngx_ssl_stapling_t        *staple;
+    ngx_ssl_certificate_t     *cert;
     STACK_OF(OPENSSL_STRING)  *aia;
 
     staple = SSL_CTX_get_ex_data(ssl->ctx, ngx_ssl_stapling_index);
 
     if (responder->len == 0) {
 
-        /* extract OCSP responder URL from certificate */
+        /* extract OCSP responder URL from *first* certificate */
+        cert = staple->certs->elts;
 
-        aia = X509_get1_ocsp(staple->cert);
+        aia = X509_get1_ocsp(cert->x509);
         if (aia == NULL) {
             ngx_log_error(NGX_LOG_WARN, ssl->log, 0,
                           "\"ssl_stapling\" ignored, "
@@ -543,8 +581,8 @@ ngx_ssl_stapling_update(ngx_ssl_stapling_t *staple)
         return;
     }
 
-    ctx->cert = staple->cert;
-    ctx->issuer = staple->issuer;
+    ctx->certs = staple->certs;
+    ctx->issuers = staple->issuers;
 
     ctx->addrs = staple->addrs;
     ctx->host = staple->host;
@@ -575,6 +613,7 @@ ngx_ssl_stapling_ocsp_handler(ngx_ssl_ocsp_ctx_t *ctx)
     size_t                 len;
     time_t                 now, valid;
     ngx_str_t              response;
+    ngx_uint_t             i, nelts;
     X509_STORE            *store;
     STACK_OF(X509)        *chain;
     OCSP_CERTID           *id;
@@ -582,6 +621,8 @@ ngx_ssl_stapling_ocsp_handler(ngx_ssl_ocsp_ctx_t *ctx)
     OCSP_BASICRESP        *basic;
     ngx_ssl_stapling_t    *staple;
     ASN1_GENERALIZEDTIME  *thisupdate, *nextupdate;
+    ngx_ssl_certificate_t *cert;
+    ngx_ssl_certificate_t *issuer;
 
     staple = ctx->data;
     now = ngx_time();
@@ -635,15 +676,25 @@ ngx_ssl_stapling_ocsp_handler(ngx_ssl_ocsp_ctx_t *ctx)
 #endif
 
     if (OCSP_basic_verify(basic, chain, store,
-                          staple->verify ? OCSP_TRUSTOTHER : OCSP_NOVERIFY)
-        != 1)
-    {
+                          staple->verify ? OCSP_TRUSTOTHER : OCSP_NOVERIFY
+#if OPENSSL_VERSION_NUMBER < 0x10000000L
+        /* ECDSA/SHA-2 signature verification not supported */
+                          | OCSP_NOSIGS
+#endif
+        ) != 1)
+   {
         ngx_ssl_error(NGX_LOG_ERR, ctx->log, 0,
                       "OCSP_basic_verify() failed");
         goto error;
     }
 
-    id = OCSP_cert_to_id(NULL, ctx->cert, ctx->issuer);
+    nelts = ctx->certs->nelts;
+    cert = ctx->certs->elts;
+    issuer = ctx->issuers->elts;
+
+    for (i = 0; i < nelts; i++, cert++, issuer++) {
+
+    id = OCSP_cert_to_id(NULL, cert->x509, issuer->x509);
     if (id == NULL) {
         ngx_ssl_error(NGX_LOG_CRIT, ctx->log, 0,
                       "OCSP_cert_to_id() failed");
@@ -685,6 +736,8 @@ ngx_ssl_stapling_ocsp_handler(ngx_ssl_ocsp_ctx_t *ctx)
     }
 
     OCSP_CERTID_free(id);
+    }   /* END OF For each 'cert/issuer' pair */
+   
     OCSP_BASICRESP_free(basic);
     OCSP_RESPONSE_free(ocsp);
 
@@ -783,10 +836,16 @@ ngx_ssl_stapling_time(ASN1_GENERALIZEDTIME *asn1time)
 static void
 ngx_ssl_stapling_cleanup(void *data)
 {
-    ngx_ssl_stapling_t  *staple = data;
-
-    if (staple->issuer) {
-        X509_free(staple->issuer);
+    ngx_uint_t              i, nelts;
+    ngx_ssl_stapling_t     *staple = data;
+    ngx_ssl_certificate_t  *issuer;
+
+    if (staple->issuers) {
+        issuer = staple->issuers->elts;
+        nelts = staple->issuers->nelts;
+        for (i = 0; i < nelts; i++, issuer++) {
+            X509_free(issuer->x509);
+        }
     }
 
     if (staple->staple.data) {
@@ -1199,6 +1258,10 @@ ngx_ssl_ocsp_create_request(ngx_ssl_ocsp_ctx_t *ctx)
     OCSP_CERTID   *id;
     OCSP_REQUEST  *ocsp;
 
+    ngx_uint_t              i, nelts;
+    ngx_ssl_certificate_t  *cert;
+    ngx_ssl_certificate_t  *issuer;
+
     ocsp = OCSP_REQUEST_new();
     if (ocsp == NULL) {
         ngx_ssl_error(NGX_LOG_CRIT, ctx->log, 0,
@@ -1206,7 +1269,13 @@ ngx_ssl_ocsp_create_request(ngx_ssl_ocsp_ctx_t *ctx)
         return NGX_ERROR;
     }
 
-    id = OCSP_cert_to_id(NULL, ctx->cert, ctx->issuer);
+    nelts = ctx->certs->nelts;
+    cert = ctx->certs->elts;
+    issuer = ctx->issuers->elts;
+
+    for (i = 0; i < nelts; i++, cert++, issuer++) {
+
+    id = OCSP_cert_to_id(NULL, cert->x509, issuer->x509);
     if (id == NULL) {
         ngx_ssl_error(NGX_LOG_CRIT, ctx->log, 0,
                       "OCSP_cert_to_id() failed");
@@ -1219,6 +1288,7 @@ ngx_ssl_ocsp_create_request(ngx_ssl_ocsp_ctx_t *ctx)
         OCSP_CERTID_free(id);
         goto failed;
     }
+    }   /* END OF For each 'cert/issuer' pair */
 
     len = i2d_OCSP_REQUEST(ocsp, NULL);
     if (len <= 0) {
